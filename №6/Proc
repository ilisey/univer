#include <stdio.h>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <stdlib.h>
#include <conio.h>
#include "MyLib.h";
using namespace std;

/*Proc5. Описать процедуру RectPS(x1, y1, x2, y2, P, S), вычисляющую периметр P и площадь S прямоугольника со сторонами, параллельными осям координат, по координатам (x1, y1), (x2, y2) его противоположных вершин (x1, y1, x2, y2 — входные, P и S — выходные параметры вещественного типа). С помощью этой процедуры найти периметры и площади трех прямоугольников с данными противоположными вершинами.*/

void RectPS(double x1, double y1, double x2, double y2) {

	double height, width, P, S;
		height = abs(y1 - y2); 
		width = abs(x1 - x2);
		P = 2 * (height + width);
		S = height * width;
		cout << "Perimetr = " << P << endl;
		cout << "Square = " << S << endl;
	}

int Proc_5()
{
	double x1, y1, x2, y2; 
	double  P, S;
	for (int i = 1; i <= 3; i++) {
		cout << "x1 = ";
		cin >> x1;
		cout << "y1 = ";
		cin >> y1;
		cout << "x2 = ";
		cin >> x2;
		cout << "y2 = ";
		cin >> y2;
		RectPS(x1, y1, x2, y2);		
	}
	return 0;
}

/*Proc12. Описать процедуру SortInc3(A, B, C), меняющую содержимое переменных A, B, C таким образом, чтобы их значения оказались упорядоченными по возрастанию (A, B, C — вещественные параметры, являющиеся одновременно входными и выходными). С помощью этой процедуры упорядочить по возрастанию два данных набора из трех чисел: (A1, B1, C1) и (A2, B2, C2).*/

void SortInc3(double A, double B, double C) {

	double	a_new, b_new, c_new;
	c_new = max (A, max (B, C));
	a_new = min (A, min (B, C));
	if ((A <= B) && (B <= C) || (C <= B) && (B <= A)) b_new = B;
	if ((B <= C) && (C <= A) || (A <= C) && (C <= B)) b_new = C;
	if ((C <= A) && (A <= B) || (B <= A) && (A <= C)) b_new = A;
	A = a_new;
	B = b_new;
	C = c_new;
	return;
}

int Proc_12()
{
	double A1, B1, C1;
	for (int i = 1; i < 3; ++i) {
		cout << "Enter A: ";
		cin >> A1;
		cout << "Enter B: ";
		cin >> B1;
		cout << "Enter C: ";
		cin >> C1;
		SortInc3(A1, B1, C1);
		cout << A1 << " " << B1 << " " << C1 << endl;
	}
	system("pause");
	return 0;
}

/*Proc17. Описать функцию RootsCount(A, B, C) целого типа, определяющую ко-
личество корней квадратного уравнения A·x2 + B·x + C = 0 (A, B, C — веще-
ственные параметры, A ≠ 0). С ее помощью найти количество корней для
каждого из трех квадратных уравнений с данными коэффициентами. Ко-
личество корней определять по значению дискриминанта: D = B2 – 4·A·C.*/

int RootsCount(double A, double B, double C)
{
	int res;
	double D; 
	res = 0;
	D = B * B - 4 * A * C;
	if (D < 0) { res = 0; }
	else if (D == 0) { res = 1; }
	else if (D > 0) { res = 2; }

	return res;
}

int Proc_17()
{
	double A, B, C;
	int answer = 0;  
	for (int i = 1; i < 4; ++i) {
		cout << "Enter A: ";
		cin >> A;
		cout << "Enter B: ";
		cin >> B;
		cout << "Enter C: ";
		cin >> C;
		answer = RootsCount(A, B, C);
		cout << "Number of roots = " << answer << endl;
	}
	system("pause");
	return 0;
}

/*Proc33. Описать функцию RadToDeg(R) вещественного типа, находящую вели-
чину угла в градусах, если дана его величина R в радианах (R — вещест-
венное число, 0 < R < 2·π). Воспользоваться следующим соотношением:
180° = π радианов. В качестве значения π использовать 3.14. С помощью
функции RadToDeg перевести из радианов в градусы пять данных углов.*/

float radtodeg(float r) {
	return float(180 * r) / 3.14;
}

int Proc_33()
{
	int i;
	float r;
	for (i = 1; i <= 5; ++i) {
		cout << "R = ";
		cin >> r;
		cout << radtodeg(r);
	}
	return 0;
}
